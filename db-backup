#!/bin/bash
# DO NOT CHANGE BELOW THREE LINES. (Variable YEAR, MONTH and YMD)
# These lines determine the directory hierarchy of the backup directory.
# The script also depends on this to manage old backups.
# The date calculation depends heavily on these variables to work.
YEAR=$(date +%Y)
MONTH=$(date +%m)
YMD=$(date +%Y%m%d-%H)

# Colors. Makes life wonderful.
ORIGCOLOR="\e[0m"
YELLOW="\e[1;33;40m"
GREEN="\e[1;32;40m"
CYAN="\e[1;36;40m"
PINK="\e[1;35;40m"
RED="\e[1;31;40m"
BLUE="\e[1;34;40m"

# Change PGUSER to your PostgreSQL user name.
# In most circumstances, this is the only thing that you need to change
# for the backup process to work. Most of the other variables will
# work OOTB without any changes.
PGUSER=

# Define the backup directory.
# By default, it will get the home directory of the PGUSER you have defined above,
# which means it assumes that a UNIX user with the same name exists.
# To prevent privilege problems, it's recommeneded to run this script
# under the same user defined above. The owner of the backups created by
# this script will be the user who executes it.
#
# You can achieve this by either adding this script to corresponding user's crontab,
# or add this to system (owned by root) crontab, and run this script with
# sudo -u $PGUSER.
DIR=$(getent passwd $PGUSER | cut -d ':' -f 6)/db-backup

# Define log file.
# You can rename the log file here, or put it somewhere else than the predefined path.
# By default, the log goes to the root directory of the backups, which is defined above.
# LOGTIME variable is defined for administrators to better understand when did an event
# happen within the log. Normally you don't need to change it.
LOGFILE=$DIR/db-backup.log

logtime() { date +"%Y/%m/%d %H:%M:%S"; }

# Add a variable to store current backup month.
# Saves some scripting pain..
CURRENTDIR=$DIR/$YEAR/$MONTH

# Add a new line in log file to separate the log entries.
echo -e "\n" >> $LOGFILE

# First off, check to see if the target directory exists.
[ ! -d $CURRENTDIR ] && mkdir -p $CURRENTDIR &&
echo -e "$YELLOW$(logtime): $YELLOW$CURRENTDIR doesn't exist. It will be created.$ORIGCOLOR" 2>&1 | tee -a $LOGFILE

# Get current free space of HDD.
# Normally you don't need to change it. If the space check function doesn't work,
# you can test it out in an interactive shell and see if the output is correct.
# This has been tested on Lubuntu 13.04 with Simplified Chinese as default language.
FREESPACE=$(df -H -B G $DIR | awk '{ print $4 }' | tail -n1 | tr -d 'G')

# Check for HDD free space. If it's less than 10 GigaBytes, delete
# backups that are older than 3 months.
if [ $(echo "$FREESPACE <= 10" | bc) -ne 0 ]; then
    echo -e "$YELLOW$(logtime):$YELLOW Free disk space is under 10 gigabytes. Clean up process started.$ORIGCOLOR" 2>&1 | tee -a $LOGFILE
    echo -e "$YELLOW$(logtime):$RED Directory deletion records:$ORIGCOLOR\n" 2>&1 | tee -a $LOGFILE
# First check for backups that are in the same year.
    for MONDIR in $DIR/$YEAR/*; do
        [[ -d $MONDIR && $MONDIR -le $(($MONTH-3)) ]] && rm -rf $DIR/$YEAR/$MONDIR &&
        echo -e "$YELLOW$(logtime):$RED Deletion:$ORIGCOLOR $DIR/$YEAR/$MONDIR" 2>&1 | tee -a $LOGFILE
    done

# Then check if last year's backup folder exists.
    if [ -d $DIR/$(($YEAR-1)) ]; then

# If exists, then delete backups that are older than 3 months.
        for MONDIR in $DIR/$(($YEAR-1))/*; do
            [[ -d $MONDIR && $(($MONTH+12-$MONDIR)) -gt 3 ]] && rm -rf $DIR/$(($YEAR-1))/$MONDIR &&
            echo -e "$YELLOW$(logtime):$RED Deletion:$ORIGCOLOR $DIR/$(($YEAR-1))/$MONDIR" 2>&1 | tee -a $LOGFILE
        done

# And if last year\'s directory is empty, delete it.
        [ $(ls -1 $DIR/$(($YEAR-1)) | wc -l) -eq 0 ] && rm -rf $DIR/$(($YEAR-1)) &&
        echo -e "$YELLOW$(logtime):$YELLOW Folder $CYAN$(($YEAR-1))$YELLOW is empty. Deleting...$ORIGCOLOR" 2>&1 | tee -a $LOGFILE
    fi
fi

# Get a list of available databases belongs to defined user.
OWNDB=$(psql -U $PGUSER -c "SELECT datname FROM pg_database JOIN pg_authid ON pg_database.datdba = pg_authid.oid WHERE rolname = '$PGUSER'" | tail -n +3 | head -n -2)
echo -e "$YELLOW$(logtime):$GREEN Databases owned by $CYAN$PGUSER$GREEN:\n$PINK$OWNDB$GREEN\nThey're going to be backed up.\n$ORIGCOLOR" 2>&1 | tee -a $LOGFILE

# Start backup!
for DB in $OWNDB; do
    # Check if the backup going to be created exists.
    if [ ! -f $CURRENTDIR/$DB-$YMD.psql ] && [ ! -f $CURRENTDIR/$DB-$YMD.tar.gz ]; then
        # If doesn't exist, proceed with backup process.
        # First dump the databases as plaintext.
        pg_dump -U $PGUSER $DB -f $CURRENTDIR/$DB-$YMD.psql 2>&1 | tee -a $LOGFILE
        if [ $? -eq 0 ]; then
            echo -e "$YELLOW$(logtime):$GREEN Successfully dumped database $PINK$DB$GREEN to file. Proceed to compression.$ORIGCOLOR" 2>&1 | tee -a $LOGFILE
        else
            echo -e "$YELLOW$(logtime):$RED Error occured while dumping database $PINK$DB$RED. Exit code: $PINK$?$RED.\nWARNING: Compression may fail!$ORIGCOLOR" 2>&1 | tee -a $LOGFILE
        fi

        # Then compress the databases into tarballs to save space.
        tar -Pczf $CURRENTDIR/$DB-$YMD.tar.gz $CURRENTDIR/$DB-$YMD.psql && rm $CURRENTDIR/$DB-$YMD.psql 2>&1 | tee -a $LOGFILE
        if [ $? -eq 0 ]; then
            echo -e "$YELLOW$(logtime):$GREEN Compression complete. Backup of $PINK$DB$GREEN-$BLUE$YMD$GREEN success.\n$ORIGCOLOR" 2>&1 | tee -a $LOGFILE
        else
            echo -e "$YELLOW$(logtime):$RED Unexpected error occured during compressing database file for $PINK$DB$RED. Exit code: $PINK$?$ORIGCOLOR" 2>&1 | tee -a $LOGFILE
        fi
    else
        # If backup already exists, do not overwrite backups if exist.
        # This check is here just in case for manual backups.
        echo -e "$YELLOW$(logtime):$RED WARNING: Backup of $PINK$DB$RED aborted. A backup under name $PINK$DB$RED-$BLUE$YMD$RED already exists. \n\
Please delete the old backup first, and then execute this script again to backup. \n\
If you don't need to back it up, please just ignore this message.\n$ORIGCOLOR" 2>&1 | tee -a $LOGFILE
    fi
done
