#!/bin/bash
timeconv()
{
  x=$1
  date -d "1970-01-01 UTC+8 +$x seconds" +"%Hh %Mm %Ss"
}

workdir=~/aokp
D=$(LC_ALL=C date +%Y-%m-%d)
backupdir=~/builds
remotedir=/var/www/aokp
remote=
remoteowner=www-data
logdir=~/make-logs
logfile=$D.log
buildlog=buildlog-$(date +%Y%m%d-%H%M%S).log
cleanevery=4
if [ -d $workdir ]; then
#  devices=$(cat $workdir/vendor/aokp/vendorsetup.sh | sed 's/add_lunch_combo aokp_//g' | sed 's/-userdebug//g')
  devices=$(ls -1 $workdir/vendor/aokp/products/ | cut -d. -f1)
else
  echo "Please specify working directory in the script."
  exit 1
fi
export USE_CCACHE=1
#export OUT_DIR_COMMON_BASE=/tmp

if [ -z $1 ]; then
 echo -e "Usage: $(basename $0) [devices] (-noclean | -noupload)"
 if [ -f $workdir/vendor/aokp/vendorsetup.sh ]; then
   echo "Available targets:\n$devices"
 else
   echo "'workdir' not defined in script, or the value isn't right."
   echo "Available targets won't be shown until it's correctly set."
   if [ -z $workdir ]; then
     echo "Current value: (not set)"
   else
     echo "Current value: $workdir"
   fi
 fi
 exit 1
fi

for each in $@; do
  case $each in
    -noclean)
      noclean=true
      flag="$flag $each"
      ;;
    -noupload)
      noupload=true
      flag="$flag $each"
      ;;
    *)
      buildtargets="$buildtargets $each"
      ;;
  esac
done

[ -z "$buildtargets" ] && echo "Please tell me what targets to build." && exit 1

if [ -z $OUT_DIR_COMMON_BASE ]; then
  outdir=$workdir/out/target/product
else
  [ ! -d $OUT_DIR_COMMON_BASE ] && echo "Defined OUT_DIR_COMMON_BASE doesn't exist. Please check script." && exit 1
  outdir=$OUT_DIR_COMMON_BASE/aokp/target/product
  [ -d $OUT_DIR_COMMON_BASE/aokp ] && rm -rf $OUT_DIR_COMMON_BASE/aokp
fi

for dir in $backupdir $logdir; do
  [ ! -d $dir ] && mkdir -p $dir
done

for dirs in $workdir $backupdir $logdir; do
  [ ! -d $dirs ] && echo "Defined directory $dirs doesn't exist. Please check script or create the directory." && exit 1
done

for vars in remotedir remote logfile buildlog; do
  [ -z \$vars ] && echo "Variable $vars is not defined. Script aborted." && exit 1
done

ssh -4 $remote "ls $remotedir &> /dev/null"
[ $? -ne 0 ] && echo "Cannot access $remotedir on $remote. Please check settings in script." && exit 1

for targets in $buildtargets; do
  echo $devices | grep $targets &> /dev/null
  if [ $? -ne 0 ]; then
    echo "Device '$targets' doesn't exist."
    exit 1
  fi
done

total=$(echo $buildtargets | wc -w)

echo "Making AOKP for $total devices:$buildtargets" | tee -a $logdir/$buildlog
[ ! -z $flag ] && echo "Using flags:$flag" | tee -a $logdir/$buildlog
echo "Building from directory: $workdir" | tee -a $logdir/$buildlog
echo "Builds will be saved to: $backupdir" | tee -a $logdir/$buildlog
echo "Builds will be uploaded to: $remote:$remotedir" | tee -a $logdir/$buildlog
echo "Build log will be found at: $logdir, filename is $buildlog" | tee -a $logdir/$buildlog
echo "Time consumption for the process will be logged at: $logdir/$logfile" | tee -a $logdir/$buildlog
[ ! -z $OUT_DIR_COMMON_BASE ] && echo "Build output directory has been redirected to: $OUT_DIR_COMMON_BASE" | tee -a $logdir/$buildlog
sleep 5

cd $workdir
. $workdir/build/envsetup.sh

if [ "$noclean" != "true" ]; then
  make clean
fi

start=$(date +%s)
cleancount=0

for target in $buildtargets; do
  echo $target | egrep ^- &> /dev/null
  if [ $? -eq 0 ]; then
    true
  else
    singlestart=$(date +%s)
    build_date=$(LC_ALL=C date +%Y-%m-%d)
    echo $target | egrep ^-
    if [ $cleancount -eq $cleanevery ]; then
      make clean
    fi
    brunch $target 2>&1 | tee -a $logdir/$buildlog
    if [ ${PIPESTATUS[0]} -ne 0 ]; then
      echo "Build error. Please check log." | tee -a $logdir/$buildlog
      echo "Time wasted: $(timeconv $(($(date +%s) - singlestart)))" | tee -a $logdir/$buildlog
      if [ -z $success ]; then
        echo "Failed the first time. Aborting." | tee -a $logdir/$buildlog
        exit 1
      else
        echo "At least one target was being built successfully." | tee -a $logdir/$buildlog
        echo "Build process will continue." | tee -a $logdir/$buildlog
        echo "Successful targets: $success" | tee -a $logdir/$buildlog
        failed="$failed $target"
      fi
    else
      success="$success $target"
    fi
    singlestop=$(date +%s)
    let cleancount+=1
    targetzip=aokp_$target\_kitkat_unofficial_$build_date.zip
    cp $outdir/$target/$targetzip $backupdir/
    echo "$target: $(timeconv $((singlestop - singlestart)))" | tee -a $logdir/$logfile
    if [ "$noupload" != "true" ]; then
      rsync -4avzhhP --stats $backupdir/$targetzip $remote:$remotedir/ &
      upload_pids="$upload_pids $!"
    fi
  fi
done

if [ "$noupload" != "true" ]; then
  for process in $upload_pids; do
    wait $process > /dev/null 2>&1
  done

  ssh -4 $remote "[ -f $remotedir/md5.txt ] && rm $remotedir/md5.txt; md5sum $remotedir/*.zip | sed s#$remotedir/#file:\ # > $remotedir/md5.txt; chown $remoteowner: $remotedir/*" > /dev/null 2>&1
fi

stop=$(date +%s)
total=$((stop - start))

if [ -z $failed ]; then
  echo -e "Everything built fine.\n" | tee -a $logdir/$buildlog
  echo -e "These targets were built successfully: $success\n" | tee -a $logdir/$buildlog
else
  echo -e "Some of the targets failed to build.\n" | tee -a $logdir/$buildlog
  echo -e "These targets were built successfully: $success\n" | tee -a $logdir/$buildlog
  echo -e "These targets failed: $failed\n" | tee -a $logdir/$buildlog
fi
echo -e "Total time: $(timeconv $total)\n" | tee -a $logdir/$logfile
cat $logdir/$logfile
